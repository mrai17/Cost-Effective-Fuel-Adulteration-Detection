import 'package:flutter/material.dart';
import 'package:flutter_blue/flutter_blue.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'dart:async';
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Petroleum Purity Tester',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Petroleum Purity Tester'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late BluetoothDevice _device;
  late Stream<List<int>> _stream;
  String _result = 'No data received';
  bool _isConnected = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Fuel Quality:',
            ),
            SizedBox(height: 10),
            Text(
              _result,
              style: Theme.of(context).textTheme.headline4,
            ),
            SizedBox(height: 30),
            FlatButton(
              child: Text(_isConnected ? 'Disconnect' : 'Connect'),
              onPressed: () {
                if (_isConnected) {
                  _disconnect();
                } else {
                  _connect();
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  void _connect() async {
    List<BluetoothDevice> devices = await FlutterBlue.instance.scanResults
        .map((results) => results.device)
        .toList();
    for (BluetoothDevice device in devices) {
      if (device.name == 'Petroleum Tester') {
        _device = device;
      }
    }
    await _device.connect();
    List<BluetoothService> services = await _device.discoverServices();
    for (BluetoothService service in services) {
      if (service.uuid.toString() ==
          '0000fff0-0000-1000-8000-00805f9b34fb') {
        List<BluetoothCharacteristic> characteristics =
            service.characteristics;
        for (BluetoothCharacteristic characteristic in characteristics) {
          if (characteristic.uuid.toString() ==
              '0000fff4-0000-1000-8000-00805f9b34fb') {
            _stream = characteristic.value;
            setState(() {
              _isConnected = true;
            });
            _stream.listen(_onDataReceived);
          }
        }
      }
    }
  }

  void _disconnect() async {
    await
